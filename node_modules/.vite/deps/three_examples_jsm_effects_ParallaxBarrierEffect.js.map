{
  "version": 3,
  "sources": ["../../three/examples/jsm/effects/ParallaxBarrierEffect.js"],
  "sourcesContent": ["import {\n\tLinearFilter,\n\tMesh,\n\tNearestFilter,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tRGBAFormat,\n\tScene,\n\tShaderMaterial,\n\tStereoCamera,\n\tWebGLRenderTarget\n} from 'three';\n\nclass ParallaxBarrierEffect {\n\n\tconstructor( renderer ) {\n\n\t\tconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\tconst _scene = new Scene();\n\n\t\tconst _stereo = new StereoCamera();\n\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\tconst _renderTargetL = new WebGLRenderTarget( 512, 512, _params );\n\t\tconst _renderTargetR = new WebGLRenderTarget( 512, 512, _params );\n\n\t\tconst _material = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t'mapLeft': { value: _renderTargetL.texture },\n\t\t\t\t'mapRight': { value: _renderTargetR.texture }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUv = vec2( uv.x, uv.y );',\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'uniform sampler2D mapLeft;',\n\t\t\t\t'uniform sampler2D mapRight;',\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec2 uv = vUv;',\n\n\t\t\t\t'\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapLeft, uv );',\n\n\t\t\t\t'\t} else {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapRight, uv );',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'\t#include <tonemapping_fragment>',\n\t\t\t\t'\t#include <colorspace_fragment>',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tconst mesh = new Mesh( new PlaneGeometry( 2, 2 ), _material );\n\t\t_scene.add( mesh );\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tconst pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( _scene, _camera );\n\n\t\t};\n\n\t}\n\n}\n\nexport { ParallaxBarrierEffect };\n"],
  "mappings": ";;;;;;;;;;;;;;AAaA,IAAM,wBAAN,MAA4B;AAAA,EAE3B,YAAa,UAAW;AAEvB,UAAM,UAAU,IAAI,mBAAoB,IAAK,GAAG,GAAG,IAAK,GAAG,CAAE;AAE7D,UAAM,SAAS,IAAI,MAAM;AAEzB,UAAM,UAAU,IAAI,aAAa;AAEjC,UAAM,UAAU,EAAE,WAAW,cAAc,WAAW,eAAe,QAAQ,WAAW;AAExF,UAAM,iBAAiB,IAAI,kBAAmB,KAAK,KAAK,OAAQ;AAChE,UAAM,iBAAiB,IAAI,kBAAmB,KAAK,KAAK,OAAQ;AAEhE,UAAM,YAAY,IAAI,eAAgB;AAAA,MAErC,UAAU;AAAA,QAET,WAAW,EAAE,OAAO,eAAe,QAAQ;AAAA,QAC3C,YAAY,EAAE,OAAO,eAAe,QAAQ;AAAA,MAE7C;AAAA,MAEA,cAAc;AAAA,QAEb;AAAA,QAEA;AAAA,QAEA;AAAA,QACA;AAAA,QAEA;AAAA,MAED,EAAE,KAAM,IAAK;AAAA,MAEb,gBAAgB;AAAA,QAEf;AAAA,QACA;AAAA,QACA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QAEA;AAAA,QACA;AAAA,QAEA;AAAA,MAED,EAAE,KAAM,IAAK;AAAA,IAEd,CAAE;AAEF,UAAM,OAAO,IAAI,KAAM,IAAI,cAAe,GAAG,CAAE,GAAG,SAAU;AAC5D,WAAO,IAAK,IAAK;AAEjB,SAAK,UAAU,SAAW,OAAO,QAAS;AAEzC,eAAS,QAAS,OAAO,MAAO;AAEhC,YAAM,aAAa,SAAS,cAAc;AAE1C,qBAAe,QAAS,QAAQ,YAAY,SAAS,UAAW;AAChE,qBAAe,QAAS,QAAQ,YAAY,SAAS,UAAW;AAAA,IAEjE;AAEA,SAAK,SAAS,SAAW,OAAO,QAAS;AAExC,UAAK,MAAM,0BAA0B;AAAO,cAAM,kBAAkB;AAEpE,UAAK,OAAO,WAAW,QAAQ,OAAO,0BAA0B;AAAO,eAAO,kBAAkB;AAEhG,cAAQ,OAAQ,MAAO;AAEvB,eAAS,gBAAiB,cAAe;AACzC,eAAS,MAAM;AACf,eAAS,OAAQ,OAAO,QAAQ,OAAQ;AAExC,eAAS,gBAAiB,cAAe;AACzC,eAAS,MAAM;AACf,eAAS,OAAQ,OAAO,QAAQ,OAAQ;AAExC,eAAS,gBAAiB,IAAK;AAC/B,eAAS,OAAQ,QAAQ,OAAQ;AAAA,IAElC;AAAA,EAED;AAED;",
  "names": []
}
